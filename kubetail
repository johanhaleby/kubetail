#!/bin/bash

readonly PROGNAME=$(basename $0)

default_since="10s"
default_namespace="default"
default_line_buffered="| grep - --line-buffered"
line_buffered="${default_line_buffered}"

pod="${1}"
container=""
selector=""
since="${default_since}"
verbose=false

usage="${PROGNAME} [-h] [-c] [-n] [-t] [-l] [-s] -- tail multiple Kubernetes pod logs at the same time

where:
    -h, --help       	Show this help text
    -c, --container  	The name of the container to tail in the pod (if multiple containers are defined in the pod). Default is none
    -t, --context    	The k8s context. ex. int1-context. Relies on ~/.kube/config for the contexts.
    -l, --selector   	Label selector. If used the pod name is ignored.
    -n, --namespace  	The Kubernetes namespace where the pods are located.
    -s, --since      	Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to $default_since.
    -b, --line-buffered This flags indicates to use line-buffered. Defaults to true.
    -v, --verbose       Show the names of the selected pods

examples:
    ${PROGNAME} my-pod-v1
    ${PROGNAME} my-pod-v1 -c my-container
    ${PROGNAME} my-pod-v1 -t int1-context -c my-container
    ${PROGNAME} -l service=my-service
    ${PROGNAME} --selector service=my-service --since 10m"

if [ $# -eq 0 ]; then
	echo "$usage"
	exit 1
fi

if [ "$#" -ne 0 ]; then
    while [ "$#" -gt 0 ]
    do
		case "$1" in
		-h|--help)
			echo "$usage"
			exit 0
			;;
		-c|--container)
			container="$2"
			;;
		-t|--context)
			context="$2"
			;;
		-l|--selector)
			selector="$2" # --selector 'foo notin (bar, baz)'
			pod=""
			;;
		-s|--since)
			if [ -z "$2" ]; then
				since="${default_since}"
			else
				since="$2"
			fi
			;;
		-n|--namespace)
			if [ -z "$2" ]; then
				namespace="${default_namespace}"
			else
				namespace="$2"
			fi
			;;
		-b|--line-buffered)
			if [ "$2" = "false" ]; then
				line_buffered=""
			fi
			;;
		-v|--verbose)
			verbose=true
			;;
		--)
			break
			;;
		-*)
			echo "Invalid option '$1'. Use --help to see the valid options" >&2
			exit 1
			;;
		# an option argument, continue
		*)  ;;
		esac
		shift
    done
fi

# Join function that supports a multi-character seperator (copied from http://stackoverflow.com/a/23673883/398441)
function join() {
	# $1 is return variable name
	# $2 is sep
	# $3... are the elements to join
	local retname=$1 sep=$2 ret=$3
	shift 3 || shift $(($#))
	printf -v "$retname" "%s" "$ret${@/#/$sep}"
}

# Get all pods matching the input and put them in an array. If no input then all pods are matched.
matching_pods=( $( kubectl get pods --context=${context} --selector="${selector}" --namespace=${namespace} --no-headers | grep "${pod}" | sed 's/ .*//' | sort ) )

if [ ${#matching_pods[@]} -eq 0 ]; then
	echo "No pods exists that match '${pod}'"
	exit 1
else
	$verbose && echo "Matching pods: ${matching_pods[@]}"
	echo "Will tail ${#matching_pods[@]} logs..."
fi

color_end=$(tput sgr0)

# Wrap all pod names in the "kubectl logs <name> -f" command
pod_logs_commands=()
for i in ${!matching_pods[@]};
do
	pod=${matching_pods[$i]}
  color_start=$(tput setaf $i)

  # Preview pod colors
  echo "$color_start$pod$color_end"

  pod_logs_commands+=("kubectl --context=${context} logs ${pod} ${container} -f --since=${since} --namespace=${namespace} | while read line; do echo \"$color_start\$line$color_end\"; done");
done

# Join all log commands into one string seperated by " & "
join command_to_tail " & " "${pod_logs_commands[@]}"

# Aggreate all logs and print to stdout
CMD="cat <( eval "${command_to_tail}" ) $line_buffered"
eval "$CMD"

# vim: noexpandtab tabstop=4 shiftwidth=4
